<!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Parsed Lab Results</title>
  <style>
    body { margin: 0; padding: 20px; font-family: 'Helvetica Neue', Arial, sans-serif;
      background: linear-gradient(to bottom, #ffffff, #e4ac61); min-height: 100vh; color: #003b59; }
    header { text-align: center; margin-bottom: 15px; }
    header h1 { font-size: 2em; margin: 0; color: #003b59; }

    .navigation { display: flex; justify-content: center; gap: 20px; margin-bottom: 30px; }
    .navigation a { display: inline-block; padding: 10px 20px; background: linear-gradient(to right, #e4ac61, #c19962);
      color: #003b59; text-decoration: none; border-radius: 8px; font-weight: bold;
      box-shadow: 0 2px 6px rgba(0, 59, 89, .2); transition: all 0.3s ease; }
    .navigation a:hover { transform: translateY(-2px); box-shadow: 0 4px 10px rgba(0, 59, 89, .3); }

    table { width: 100%; border-collapse: collapse; margin-bottom: 40px; background: #ffffff;
      box-shadow: 0 4px 20px rgba(0, 59, 89, .15); border-radius: 16px; overflow: hidden; }
    th, td { padding: 12px; text-align: center; border-bottom: 1px solid #ddd; font-size: .95em; }
    th { background: linear-gradient(to right, #e4ac61, #c19962); color: #003b59; font-weight: bold; font-size: 1em; }
    tr:hover { background-color: #f5f5f5; }

    tr.expandable { cursor: pointer; }
    tr.expandable:hover { background-color: rgba(228, 172, 97, 0.1); }
    tr.expandable td:first-child { position: relative; padding-left: 30px; }
    tr.expandable td:first-child:before { content: "▶"; position: absolute; left: 10px; color: #003b59; transition: transform 0.2s; }
    tr.expanded td:first-child:before { content: "▼"; }
    tr.details-row { display: none; }
    tr.details-row.visible { display: table-row; animation: fadeIn 0.5s; }
    @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }

    .details-content { padding: 15px; background-color: #f9f9f9; text-align: left; }
    .details-content h3 { margin-top: 0; color: #003b59; }
    .details-content textarea { width: 100%; min-height: 100px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; font-family: inherit; margin-top: 10px; }

    .high-status { background-color: #ffe5e5; }
    .low-status  { background-color: #e5f0ff; }

    .metrics-section, .ai-summary-section { background: #ffffff; border-radius: 16px; box-shadow: 0 4px 20px rgba(0, 59, 89, .15); padding: 20px; margin-bottom: 40px; }
    .metrics-section h2, .ai-summary-section h2 { color: #003b59; font-size: 1.5em; margin: 0 0 15px; text-align: center; }
    .metrics-section ul { list-style: none; padding: 0; margin: 0; }
    .metrics-section li { padding: 6px 0; text-align: center; font-size: 1em; }

    footer { margin-top: 40px; text-align: center; font-size: .8em; color: #003b59; }
  </style>
</head>
<body>

<header>
  <h1>Parsed Lab Results</h1>
  <p>Click on a row to expand field and create annotations for file export.</p>
</header>

<div class="navigation">
  <a href="javascript:history.back()">Go Back/Review PDF Results</a>
  <a href="/">Start Over with New Files</a>
  <a href="#" onclick="exportToCSV()" id="exportBtn">Export to CSV</a>
  <a href="#" id="aiSummaryBtn">Get AI Lab Summary</a>
  <a href="#" id="downloadPdfBtn">Download PDF Report</a>
</div>

<div class="metrics-section">
  <h2>Insulin Resistance Measures</h2>
  <ul>
    <li>Triglyceride to HDL ratio: {{ insulin_metrics.trig_hdl_ratio if insulin_metrics.trig_hdl_ratio is not none else 'calculation unavailable' }}</li>
    <li>HOMA-IR: {{ insulin_metrics.homa_ir if insulin_metrics.homa_ir is not none else 'calculation unavailable' }}</li>
    <li>Estimated Average Glucose: {{ insulin_metrics.estimated_average_glucose if insulin_metrics.estimated_average_glucose is not none else 'calculation unavailable' }}</li>
  </ul>
</div>

<div id="ai-summary-section" class="ai-summary-section" style="display:none;">
  <h2>AI Lab Summary</h2>
  <div id="ai-summary-content"></div>
</div>

<table id="resultsTable">
  <thead>
    <tr>
      <th>Date</th>
      <th>Test Name</th>
      <th>Observed Value</th>
      <th>Low Reference</th>
      <th>High Reference</th>
      <th>Units</th>
      <th>Flag</th>
    </tr>
  </thead>
  <tbody>
    {% for r in rows %}
    <tr class="expandable {% if r.Flag == 'High' %}high-status{% elif r.Flag == 'Low' %}low-status{% endif %}"
        data-row-id="{{ loop.index0 }}"
        onclick="toggleDetails({{ loop.index0 }})">
      <td>{{ r.Date }}</td>
      <td>{{ r.TestName }}</td>
      <td>{{ r.ObservedValue }}</td>
      <td>{{ r.Low }}</td>
      <td>{{ r.High }}</td>
      <td>{{ r.Units }}</td>
      <td>{{ r.Flag }}</td>
    </tr>
    <tr class="details-row" id="details-{{ loop.index0 }}">
      <td colspan="6">
        <div class="details-content">
          <h3>{{ r.TestName }} - Additional Information</h3>
          <textarea placeholder="Add your notes about this test result here..."></textarea>
        </div>
      </td>
    </tr>
    {% endfor %}
  </tbody>
</table>

<script>
/** -------------------------------
 * JSON data from Jinja
 * ------------------------------- */
const allRowsData   = {{ rows|tojson }};
const insulinMetrics= {{ insulin_metrics|tojson }};

/** -------------------------------
 * AI Summary fetch
 * ------------------------------- */
document.getElementById('aiSummaryBtn').addEventListener('click', async (e) => {
  e.preventDefault();
  const btn = e.currentTarget;
  btn.textContent = 'Loading...';
  try {
    const response = await fetch('/ai_summary', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ rows: allRowsData, insulin_metrics: insulinMetrics })
    });
    const data = await response.json();
    const section = document.getElementById('ai-summary-section');
    document.getElementById('ai-summary-content').textContent = data.summary;
    section.style.display = 'block';
  } catch (err) {
    const section = document.getElementById('ai-summary-section');
    section.style.display = 'block';
    document.getElementById('ai-summary-content').textContent = 'Error retrieving AI summary.';
  } finally {
    btn.textContent = 'Get AI Lab Summary';
  }
});

/** -------------------------------
 * Sort table: Abnormal rows first
 * ------------------------------- */
window.addEventListener('DOMContentLoaded', function() {
  const tableBody = document.querySelector('#resultsTable tbody');
  const rows = Array.from(tableBody.querySelectorAll('tr.expandable'));
  rows.sort((a, b) => {
    const aFlag = a.classList.contains('high-status') ? 2 : (a.classList.contains('low-status') ? 1 : 0);
    const bFlag = b.classList.contains('high-status') ? 2 : (b.classList.contains('low-status') ? 1 : 0);
    return bFlag - aFlag;
  });
  rows.forEach(row => {
    const rowId = row.getAttribute('data-row-id');
    const detailsRow = document.getElementById('details-' + rowId);
    tableBody.appendChild(row);
    tableBody.appendChild(detailsRow);
  });
});

/** -------------------------------
 * Expand/collapse detail rows
 * ------------------------------- */
function toggleDetails(rowId) {
  const detailsRow = document.getElementById('details-' + rowId);
  const expandableRow = document.querySelector(`tr[data-row-id="${rowId}"]`);
  detailsRow.classList.toggle('visible');
  expandableRow.classList.toggle('expanded');
}

/** -------------------------------
 * Export table to CSV
 * ------------------------------- */
function exportToCSV() {
  const table = document.getElementById('resultsTable');
  const rows = table.querySelectorAll('tr.expandable');
  const headers = ['Date','Test Name','Observed Value','Low Reference','High Reference','Units','Flag','Notes'];
  let csvContent = headers.join(',') + '\n';
  rows.forEach(row => {
    const cells = row.querySelectorAll('td');
    const rowData = Array.from(cells).map(cell => {
      let content = cell.textContent.trim();
      if (content.includes(',') || content.includes('"') || content.includes('\n')) {
        content = '"' + content.replace(/"/g, '""') + '"';
      }
      return content;
    });
    const rowId = row.getAttribute('data-row-id');
    const detailsRow = document.getElementById('details-' + rowId);
    const textarea = detailsRow.querySelector('textarea');
    let notes = textarea ? textarea.value.trim() : '';
    if (notes.includes(',') || notes.includes('"') || notes.includes('\n')) {
      notes = '"' + notes.replace(/"/g, '""') + '"';
    }
    rowData.push(notes);
    csvContent += rowData.join(',') + '\n';
  });
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.href = url;
  link.download = `lab_results_${new Date().toISOString().split('T')[0]}.csv`;
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}
document.getElementById('downloadPdfBtn').addEventListener('click', async (e) => {
  e.preventDefault();
  const response = await fetch('/chart_report', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ rows: allRowsData })
  });
  const blob = await response.blob();
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url; link.download = 'lab_report.pdf';
  document.body.appendChild(link); link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
});

</script>

</body>
</html>
