<!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Parsed Lab Results</title>
  <style>
    body {
      margin: 0;
      padding: 20px;
      font-family: 'Helvetica Neue', Arial, sans-serif;
      background: linear-gradient(to bottom, #ffffff, #e4ac61);
      min-height: 100vh;
      color: #003b59;
    }
    header {
      text-align: center;
      margin-bottom: 15px;
    }
    header img {
      width: 240px;
      margin-bottom: 10px;
    }
    header h1 {
      font-size: 2em;
      margin: 0;
      color: #003b59;
    }
    
    /* Navigation styles */
    .navigation {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin-bottom: 30px;
    }
    .navigation a {
      display: inline-block;
      padding: 10px 20px;
      background: linear-gradient(to right, #e4ac61, #c19962);
      color: #003b59;
      text-decoration: none;
      border-radius: 8px;
      font-weight: bold;
      box-shadow: 0 2px 6px rgba(0, 59, 89, .2);
      transition: all 0.3s ease;
    }
    .navigation a:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(0, 59, 89, .3);
    }
    
    table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 40px;
      background: #ffffff;
      box-shadow: 0 4px 20px rgba(0, 59, 89, .15);
      border-radius: 16px;
      overflow: hidden;
    }
    th, td {
      padding: 12px;
      text-align: center;
      border-bottom: 1px solid #ddd;
      font-size: .95em;
    }
    th {
      background: linear-gradient(to right, #e4ac61, #c19962);
      color: #003b59;
      font-weight: bold;
      font-size: 1em;
    }
    tr:hover {
      background-color: #f5f5f5;
    }

    /* Expandable row styles */
    tr.expandable {
      cursor: pointer;
    }
    tr.expandable:hover {
      background-color: rgba(228, 172, 97, 0.1);
    }
    tr.expandable td:first-child {
      position: relative;
      padding-left: 30px;
    }
    tr.expandable td:first-child:before {
      content: "▶";
      position: absolute;
      left: 10px;
      color: #003b59;
      transition: transform 0.2s;
    }
    tr.expanded td:first-child:before {
      content: "▼";
    }
    tr.details-row {
      display: none;
    }
    tr.details-row.visible {
      display: table-row;
      animation: fadeIn 0.5s;
    }
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }

    .details-content {
      padding: 15px;
      background-color: #f9f9f9;
      text-align: left;
    }
    .details-content h3 {
      margin-top: 0;
      color: #003b59;
    }
    .details-content textarea {
      width: 100%;
      min-height: 100px;
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-family: inherit;
      margin-top: 10px;
    }

    /* Status colors */
    .high-status {
      background-color: #ffe5e5;
    }
    .low-status {
      background-color: #e5f0ff;
    }

    .metrics-section {
      background: #ffffff;
      border-radius: 16px;
      box-shadow: 0 4px 20px rgba(0, 59, 89, .15);
      padding: 20px;
      margin-bottom: 40px;
    }
    .metrics-section h2 {
      color: #003b59;
      font-size: 1.5em;
      margin-top: 0;
      margin-bottom: 15px;
      text-align: center;
    }
    .metrics-section ul {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    .metrics-section li {
      padding: 6px 0;
      text-align: center;
      font-size: 1em;
    }

    /* Add chart section styles */
    .chart-section {
      margin-top: 60px;
    }
    .chart-section h2 {
      color: #003b59;
      font-size: 1.5em;
      margin-bottom: 20px;
      text-align: center;
    }
    #charts {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 24px;
    }
    .chart-container {
      background: #ffffff;
      border-radius: 20px;
      box-shadow: 0 6px 18px rgba(0, 59, 89, .15);
      padding: 20px;
      width: 260px;
      height: 240px;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: space-between;
      transition: transform 0.3s ease;
    }
    .chart-container:hover {
      transform: translateY(-8px);
    }
    .chart-title {
      font-size: 1em;
      font-weight: bold;
      color: #003b59;
      margin-bottom: 10px;
      text-align: center;
    }
    footer {
      margin-top: 40px;
      text-align: center;
      font-size: .8em;
      color: #003b59;
    }
  </style>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@1.1.0"></script>
  <script src="https://cdn.jsdelivr.net/npm/date-fns@2.30.0"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@3.0.0"></script>
</head>
<body>

<header>
  <h1>Parsed Lab Results</h1>
  <p>Click on a row to expand field and create annotations for file export.</p>
</header>

<div class="navigation">
  <a href="javascript:history.back()">Go Back/Review PDF Results</a>
  <a href="/">Start Over with New Files</a>
  <a href="#" onclick="exportToCSV()" id="exportBtn">Export to CSV</a>
</div>

<div class="metrics-section">
  <h2>Insulin Resistance Measures</h2>
  <ul>
    <li>Triglyceride to HDL ratio: {{ insulin_metrics.trig_hdl_ratio if insulin_metrics.trig_hdl_ratio is not none else 'calculation unavailable' }}</li>
    <li>HOMA-IR: {{ insulin_metrics.homa_ir if insulin_metrics.homa_ir is not none else 'calculation unavailable' }}</li>
    <li>Estimated Average Glucose: {{ insulin_metrics.estimated_average_glucose if insulin_metrics.estimated_average_glucose is not none else 'calculation unavailable' }}</li>
  </ul>
</div>

<table id="resultsTable">
  <thead>
    <tr>
      <th>Date</th>
      <th>Test Name</th>
      <th>Observed Value</th>
      <th>Low Reference</th>
      <th>High Reference</th>
      <th>Units</th>
      <th>Flag</th>
    </tr>
  </thead>
  <tbody>
    {% for r in rows %}
    <tr class="expandable {% if r.Flag == 'High' %}high-status{% elif r.Flag == 'Low' %}low-status{% endif %}"
        data-row-id="{{ loop.index0 }}"
        onclick="toggleDetails({{ loop.index0 }})">
      <td>{{ r.Date }}</td>
      <td>{{ r.TestName }}</td>
      <td>{{ r.ObservedValue }}</td>
      <td>{{ r.Low }}</td>
      <td>{{ r.High }}</td>
      <td>{{ r.Units }}</td>
      <td>{{ r.Flag }}</td>
    </tr>
    <tr class="details-row" id="details-{{ loop.index0 }}">
      <td colspan="6">
        <div class="details-content">
          <h3>{{ r.TestName }} - Additional Information</h3>
<!--          <p><strong>Definition:</strong> This field contains information about what {{ r.TestName }} measures and why it is clinically relevant.</p>
          <p><strong>Interpretation:</strong> Guidelines for interpreting {{ r.TestName }} results based on the value {{ r.ObservedValue }} {{ r.Units }}.</p>-->
          <textarea placeholder="Add your notes about this test result here..."></textarea>
        </div>
      </td>
    </tr>
    {% endfor %}
  </tbody>
</table>

<div class="chart-section">
  <h2>Individual Biomarker Charts</h2>
  <div id="charts"></div>
</div>

<script>
// Sort table to show abnormal rows first
window.addEventListener('DOMContentLoaded', function() {
  const tableBody = document.querySelector('#resultsTable tbody');
  const rows = Array.from(tableBody.querySelectorAll('tr.expandable'));

  // Sort rows so High and Low appear first, but keep details rows after their parent
  rows.sort((a, b) => {
    // Get flags
    const aFlag = a.classList.contains('high-status') ? 2 :
                  (a.classList.contains('low-status') ? 1 : 0);
    const bFlag = b.classList.contains('high-status') ? 2 :
                  (b.classList.contains('low-status') ? 1 : 0);

    return bFlag - aFlag; // Reverse sort so higher values (abnormal) come first
  });

  // Rebuild the table in sorted order, keeping details rows with their parents
  rows.forEach(row => {
    const rowId = row.getAttribute('data-row-id');
    const detailsRow = document.getElementById('details-' + rowId);

    // Move the row and its details row to the end of the table
    tableBody.appendChild(row);
    tableBody.appendChild(detailsRow);
  });
});

// Function to toggle detail rows
function toggleDetails(rowId) {
  const detailsRow = document.getElementById('details-' + rowId);
  const expandableRow = document.querySelector(`tr[data-row-id="${rowId}"]`);

  detailsRow.classList.toggle('visible');
  expandableRow.classList.toggle('expanded');
}

// Function to export table data to CSV
function exportToCSV() {
  const table = document.getElementById('resultsTable');
  const rows = table.querySelectorAll('tr.expandable');
  const headers = ['Date', 'Test Name', 'Observed Value', 'Low Reference', 'High Reference', 'Units', 'Flag', 'Notes'];
  
  let csvContent = headers.join(',') + '\n';
  
  rows.forEach(row => {
    const cells = row.querySelectorAll('td');
    const rowData = Array.from(cells).map(cell => {
      let content = cell.textContent.trim();
      // Escape quotes and wrap in quotes if content contains commas
      if (content.includes(',') || content.includes('"') || content.includes('\n')) {
        content = '"' + content.replace(/"/g, '""') + '"';
      }
      return content;
    });
    
    // Get the notes from the corresponding textarea
    const rowId = row.getAttribute('data-row-id');
    const detailsRow = document.getElementById('details-' + rowId);
    const textarea = detailsRow.querySelector('textarea');
    let notes = textarea ? textarea.value.trim() : '';
    
    // Escape notes content for CSV
    if (notes.includes(',') || notes.includes('"') || notes.includes('\n')) {
      notes = '"' + notes.replace(/"/g, '""') + '"';
    }
    
    rowData.push(notes);
    csvContent += rowData.join(',') + '\n';
  });
  
  // Create and download the file
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', `lab_results_${new Date().toISOString().split('T')[0]}.csv`);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

// Chart creation code
let testData = {{ testData|tojson }};
const chartsDiv = document.getElementById('charts');

for (const [name, data] of Object.entries(testData)) {

  <!-- let low = parseFloat(r.Low); -->
  <!-- let high = r.High ? parseFloat(r.High) : null; -->
  <!-- const val = parseFloat(r.ObservedValue); -->
  <!-- const obs = isNaN(val) ? 0 : val; -->

  <!-- // For one-sided ranges (only low bound) -->
  <!-- if (!isNaN(low) && (high === null || isNaN(high))) { -->
  <!--   // Set upper limit to be 50% above observed value or 50% above lower limit, whichever is higher -->
  <!--   high = Math.max(obs * 1.5, low * 1.5); -->
  <!-- } -->
  <!-- // For one-sided ranges (only high bound) -->
  <!-- else if (isNaN(low) && !isNaN(high)) { -->
  <!--   // Set lower limit to be 50% below observed value or 50% below upper limit, whichever is lower -->
  <!--   low = Math.min(obs * 0.5, high * 0.5); -->
  <!-- } -->
  <!-- // If both limits are missing -->
  <!-- else if (isNaN(low) && (high === null || isNaN(high))) { -->
  <!--   low = 0; -->
  <!--   high = Math.max(obs * 2, 100); -->
  <!-- } -->

  <!-- let yMin = Math.min(low, obs, high); -->
  <!-- let yMax = Math.max(low, obs, high); -->
  <!-- const pad = (yMax - yMin) * 0.2 || 1; -->
  <!-- yMin = Math.max(0, yMin - pad); -->
  <!-- yMax += pad; -->

  const card = document.createElement('div');
  card.className = 'chart-container';
  const title = document.createElement('div');
  title.className = 'chart-title';
  title.textContent = name;
  card.appendChild(title);

  const canvas = document.createElement('canvas');
  canvas.id = `chart-${name}`;
  card.appendChild(canvas);
  chartsDiv.appendChild(card);

  const points = data.Date.map((dateStr, i) => ({
    x: new Date(dateStr),       // parse date string into JS Date object
    y: data.ObservedValue[i],   // corresponding Y value
  }));
  new Chart(canvas.getContext('2d'), {
    type: 'scatter',
    data: {
      datasets: [{
        label: 'Observed Value',
        data: points,
        pointRadius: 7,
        pointHoverRadius: 14,
      }]
    },
    options: {
      responsive: false,
      maintainAspectRatio: false,
      scales: {
        x: {
          title: {
            display: true,
            text: 'Date'
          },
          type: 'time',          // Tell Chart.js to use time scale
          time: {
            parser: 'MM/DD/YYYY', // Optional if you're passing Date objects
            tooltipFormat: 'MMM d, yyyy',
            unit: 'day',
          },
        },
        y: {
          title: {
            display: true,
            text: `${name} (${data.Units[0]})`,
            font: { weight: 'bold', size: 14 }
          }
        }
      },
      plugins: {
        annotation: {
          annotations: {
            adjustScaleRange: true,

            ...(Number.isFinite(parseFloat(data.Low[0])) ? {
              lowLine: {
                type: 'line',
                yMin: parseFloat(data.Low[0]),
                yMax: parseFloat(data.Low[0]),
                borderColor: 'blue',
                borderWidth: 1,
                borderDash: [6, 6],
                label: {
                  content: `Low: ${data.Low[0]}`,
                  enabled: true,
                  position: 'start',
                  backgroundColor: 'rgba(130,194,215,0.2)',
                  color: 'blue',
                  font: { weight: 'bold', size: 9 },
                  yAdjust: 12,
                  xAdjust: 10,
                  padding: 4
                }
              }
            } : {}),

            ...(data.High[0] && Number.isFinite(parseFloat(data.High[0])) ? {
              highLine: {
                type: 'line',
                yMin: parseFloat(data.High[0]),
                yMax: parseFloat(data.High[0]),
                borderColor: 'red',
                borderWidth: 1,
                borderDash: [6, 6],
                label: {
                  content: `High: ${data.High[0]}`,
                  enabled: true,
                  position: 'start',
                  backgroundColor: 'rgba(228,172,97,0.2)',
                  color: 'red',
                  font: { weight: 'bold', size: 9 },
                  yAdjust: -12,
                  xAdjust: 10,
                  padding: 4
                }
              }
            } : {})
          },
        },
        datalabels: {
          display: true,
          formatter: (value, context) => `${value.y}`,
          anchor: 'end',
          align: 'top',
          font: { weight: 'bold' }
        },
        legend: { display: false },
        tooltip: {
          callbacks: {
            label: (ctx) => `${ctx.dataset.label}: ${ctx.parsed.y}`
          }
        }
      }
    },
    plugins: [ChartDataLabels]
  });
};
</script>

</body>
</html>

